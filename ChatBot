import nltk
from nltk.chat.util import Chat, reflections

# Definindo pares de padrão e respostas para o chatbot
pares = [
    ['meu nome é (.*)', ['Olá %1, como posso te ajudar?']],
    ['(oi|olá|oi!)', ['Olá, como posso te ajudar?']],
    ['como você está?', ['Estou bem, obrigado por perguntar! E você?']],
    ['(.*) idade (.*)', ['Eu sou apenas um programa de computador, então não tenho idade.']],
    ['adeus', ['Até mais, tenha um bom dia!']],
    ['(.*)', ['Desculpe, não entendi. Pode repetir?']]
]

# Criando o chatbot
chatbot = Chat(pares, reflections)

# Iniciando a conversa
print("Olá! Eu sou um chatbot. Como posso te ajudar hoje?")
while True:
    entrada = input("Você: ")
    resposta = chatbot.respond(entrada)
    print("Chatbot:", resposta)

EXPLICAÇÃO DO CÓDIGO :
Claro! Vamos analisar o código linha por linha:

1. **`import nltk`**: Aqui, estamos importando a biblioteca `nltk` (Natural Language Toolkit). O NLTK é uma biblioteca Python amplamente utilizada para processamento de linguagem natural. Ele fornece ferramentas e recursos para trabalhar com texto, tokenização, análise gramatical, entre outras tarefas relacionadas à linguagem natural.
2. **`from nltk.chat.util import Chat, reflections`**: Nesta linha, estamos importando duas classes específicas do módulo `nltk.chat.util`. A classe `Chat` é usada para criar um chatbot com base em pares de padrão e respostas. A classe `reflections` contém dicionários que mapeiam pronomes e outras palavras para suas formas alternativas, o que ajuda a tornar as respostas mais flexíveis.
3. **`pares = [...]`**: Aqui, estamos definindo uma lista chamada `pares`. Cada elemento da lista é uma lista aninhada contendo dois elementos: um padrão (uma expressão regular) e uma lista de respostas associadas a esse padrão. Esses pares de padrão e resposta serão usados pelo chatbot para responder às entradas do usuário.
4. **`chatbot = Chat(pares, reflections)`**: Estamos criando uma instância do chatbot usando a classe `Chat`. Passamos os pares de padrão e respostas, bem como o dicionário de reflexões, para inicializar o chatbot.
5. **`print("Olá! Eu sou um chatbot. Como posso te ajudar hoje?")`**: Esta linha exibe uma mensagem de boas-vindas ao usuário quando o chatbot é iniciado.
6. **`while True:`**: Aqui, começamos um loop infinito para manter o chatbot em execução. Ele continuará pedindo entradas do usuário e respondendo até que o usuário decida encerrar a conversa.
7. **`entrada = input("Você: ")`**: O chatbot solicita uma entrada do usuário. A entrada é armazenada na variável `entrada`.
8. **`resposta = chatbot.respond(entrada)`**: O chatbot processa a entrada do usuário usando os pares de padrão e respostas definidos anteriormente. Ele seleciona a resposta apropriada com base no padrão correspondente.
9. **`print("Chatbot:", resposta)`**: O chatbot exibe a resposta gerada para a entrada do usuário.
Em resumo, este código cria um chatbot simples que responde a algumas entradas específicas do usuário com respostas predefinidas. Ele usa a biblioteca NLTK para processar as entradas e gerar as respostas. O chatbot pode cumprimentar o usuário, perguntar sobre seu nome, responder a perguntas sobre sua idade e se despedir de maneira educada. Se o usuário fizer uma pergunta não reconhecida, o chatbot responderá com uma mensagem padrão de "Desculpe, não entendi. Pode repetir?".
